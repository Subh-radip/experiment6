class Facility:
    def _init_(self, name):
        self.name = name
        self.bookings = []  # Stores (date, start_time, end_time, user)

    def book(self, user, date, start_time, end_time):
        """Books the facility if no overlapping bookings exist."""
        for d, s, e, u in self.bookings:
            if d == date and not (end_time <= s or start_time >= e):
                print(f"{self.name} is already booked from {s} to {e} on {date}.")
                return

        self.bookings.append((date, start_time, end_time, user))
        print(f"Booking confirmed for {user} on {date} from {start_time} to {end_time}.")

    def cancel_booking(self, user, date, start_time, end_time):
        """Cancels a booking if it exists."""
        for booking in self.bookings:
            if booking == (date, start_time, end_time, user):
                self.bookings.remove(booking)
                print(f"Booking for {user} on {date} from {start_time} to {end_time} canceled.")
                return
        print("No matching booking found to cancel.")

    def show_bookings(self):
        """Displays all bookings."""
        if not self.bookings:
            print(f"No bookings for {self.name}.")
        else:
            print(f"Bookings for {self.name}:")
            for date, start_time, end_time, user in self.bookings:
                print(f" - {date}: {start_time} to {end_time} by {user}")


# Example usage
if _name_ == "_main_":
    court = Facility("Basketball Court")
    court.book("SUBHRADIP", "2025-04-01", "10:00 AM", "11:00 AM")
    court.book("VAMSHI", "2025-04-01", "10:30 AM", "11:30 AM")  # Overlapping booking
    court.cancel_booking("SUBHRADIP", "2025-04-01", "10:00 AM", "11:00 AM")
    court.show_bookings()